// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/mrgsolve.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// DEVTRAN
Rcpp::List DEVTRAN(const Rcpp::List parin, const Rcpp::NumericVector& inpar, const Rcpp::CharacterVector& parnames, const Rcpp::NumericVector& init, Rcpp::CharacterVector& cmtnames, const Rcpp::IntegerVector& capture, const Rcpp::List& funs, const Rcpp::NumericMatrix& data, const Rcpp::NumericMatrix& idata, Rcpp::NumericMatrix& OMEGA, Rcpp::NumericMatrix& SIGMA, Rcpp::Environment envir);
RcppExport SEXP mrgsolve_DEVTRAN(SEXP parinSEXP, SEXP inparSEXP, SEXP parnamesSEXP, SEXP initSEXP, SEXP cmtnamesSEXP, SEXP captureSEXP, SEXP funsSEXP, SEXP dataSEXP, SEXP idataSEXP, SEXP OMEGASEXP, SEXP SIGMASEXP, SEXP envirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parin(parinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type inpar(inparSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type init(initSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type cmtnames(cmtnamesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type capture(captureSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type funs(funsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type idata(idataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type OMEGA(OMEGASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type envir(envirSEXP);
    rcpp_result_gen = Rcpp::wrap(DEVTRAN(parin, inpar, parnames, init, cmtnames, capture, funs, data, idata, OMEGA, SIGMA, envir));
    return rcpp_result_gen;
END_RCPP
}
// MVGAUSS
arma::mat MVGAUSS(Rcpp::NumericMatrix& OMEGA_, int n);
RcppExport SEXP mrgsolve_MVGAUSS(SEXP OMEGA_SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type OMEGA_(OMEGA_SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MVGAUSS(OMEGA_, n));
    return rcpp_result_gen;
END_RCPP
}
// dcorr
void dcorr(Rcpp::NumericMatrix& x);
RcppExport SEXP mrgsolve_dcorr(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x(xSEXP);
    dcorr(x);
    return R_NilValue;
END_RCPP
}
// SUPERMATRIX
Rcpp::NumericMatrix SUPERMATRIX(const Rcpp::List& a, bool keep_names);
RcppExport SEXP mrgsolve_SUPERMATRIX(SEXP aSEXP, SEXP keep_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_names(keep_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(SUPERMATRIX(a, keep_names));
    return rcpp_result_gen;
END_RCPP
}
// get_tokens
Rcpp::List get_tokens(const Rcpp::CharacterVector& code);
RcppExport SEXP mrgsolve_get_tokens(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tokens(code));
    return rcpp_result_gen;
END_RCPP
}
// EXPAND_EVENTS
Rcpp::NumericMatrix EXPAND_EVENTS(const Rcpp::IntegerVector& idcol_, const Rcpp::NumericMatrix& events, const Rcpp::NumericVector& id);
RcppExport SEXP mrgsolve_EXPAND_EVENTS(SEXP idcol_SEXP, SEXP eventsSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type idcol_(idcol_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(EXPAND_EVENTS(idcol_, events, id));
    return rcpp_result_gen;
END_RCPP
}
// TOUCH_FUNS
Rcpp::List TOUCH_FUNS(const Rcpp::NumericVector& lparam, const Rcpp::NumericVector& linit, int Neta, int Neps, const Rcpp::CharacterVector& capture, const Rcpp::List& funs, Rcpp::Environment envir);
RcppExport SEXP mrgsolve_TOUCH_FUNS(SEXP lparamSEXP, SEXP linitSEXP, SEXP NetaSEXP, SEXP NepsSEXP, SEXP captureSEXP, SEXP funsSEXP, SEXP envirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lparam(lparamSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type linit(linitSEXP);
    Rcpp::traits::input_parameter< int >::type Neta(NetaSEXP);
    Rcpp::traits::input_parameter< int >::type Neps(NepsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type capture(captureSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type funs(funsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type envir(envirSEXP);
    rcpp_result_gen = Rcpp::wrap(TOUCH_FUNS(lparam, linit, Neta, Neps, capture, funs, envir));
    return rcpp_result_gen;
END_RCPP
}
// QUICKSIM
Rcpp::NumericMatrix QUICKSIM(const Rcpp::List& parin, const Rcpp::NumericVector& param, const Rcpp::NumericVector& init, Rcpp::CharacterVector& parnames, Rcpp::NumericMatrix& data, Rcpp::IntegerVector& n, const Rcpp::NumericMatrix& idata, const Rcpp::IntegerVector& req, const Rcpp::IntegerVector& capturei, const Rcpp::List& funs, const Rcpp::IntegerVector& nre);
RcppExport SEXP mrgsolve_QUICKSIM(SEXP parinSEXP, SEXP paramSEXP, SEXP initSEXP, SEXP parnamesSEXP, SEXP dataSEXP, SEXP nSEXP, SEXP idataSEXP, SEXP reqSEXP, SEXP captureiSEXP, SEXP funsSEXP, SEXP nreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parin(parinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type init(initSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type idata(idataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type req(reqSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type capturei(captureiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type funs(funsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type nre(nreSEXP);
    rcpp_result_gen = Rcpp::wrap(QUICKSIM(parin, param, init, parnames, data, n, idata, req, capturei, funs, nre));
    return rcpp_result_gen;
END_RCPP
}
